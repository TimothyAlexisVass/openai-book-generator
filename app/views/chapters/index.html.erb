<%= javascript_include_tag "sortable" %>
<%= javascript_include_tag "gpt" %>

<div class="mb-30">
  <h1 class="text-2xl font-bold text-blue-700 mb-4">Chapters of <%= @book.title %></h1>

  <%= form_tag handle_book_chapters_path, method: :post do %>
    <div id="chapters-container">
      <!-- Existing chapters -->
      <% @chapters.each do |chapter| %>
        <div class="chapter-field hover:bg-gray-50">
          <%= hidden_field_tag 'chapters[][id]', chapter.id %>
          <%= number_field_tag "chapters[][number]", chapter.number, class: "sortable-handle w-[60px] detail-number appearance-none bg-transparent text-center", readonly: true %></span><%= text_field_tag 'chapters[][title]', chapter.title, class: 'chapter-title-input w-[60vw]', oninput: "showSaveModal()" %><button type="button" class="bg-blue-700 hover:bg-blue-500 inline-block transition-all duration-500 text-white font-bold py-2 px-4 ml-2 my-2 rounded remove-section" onclick="remove()">Remove</button>
        </div>
      <% end %>
    </div>
  <% end %>

  <input type="number" id="suggested-amount" class="w-[65px]" min="1" max="20" value="10">
  <button id="suggest-chapters" class="bg-blue-700 hover:bg-blue-500 inline-block transition-all duration-500 text-white font-bold py-2 px-4 ml-2 my-2 rounded">
    Suggest chapters
    <span id="suggest-chapters-loader" class="hidden ml-2 inline-block"><i class="loader"></i></span>
  </button>

  <%= button_tag 'Add chapter', id: 'add-chapter', class: "bg-blue-700 hover:bg-blue-500 inline-block transition-all duration-500 text-white font-bold py-2 px-4 ml-2 my-2 rounded", onclick: "addChapter(null)" %>
  <div id="save-changes-modal" class="hidden fixed text-center transition-all duration-500 right-2 bg-white p-3 rounded shadow" style="bottom: -500px">
    <p class="mb-2">Save changes?</p>
    <button id="save-changes-button" class="bg-blue-700 hover:bg-blue-500 inline-block transition-all duration-500 text-white font-bold py-2 px-4 ml-2 my-2 rounded">
      Save
    </button>

  </div>
</div>

<script>
let chapterCount = <%= @chapters.count %>;
let chaptersContainer;

$(document).ready(function() {
  chaptersContainer = $('#chapters-container');

  $('#save-changes-button').on('click', function() {
    $('#save-changes-modal').addClass('hidden');
    $('form').submit();
  });

  // Initialize SortableJS
  const sortableChapters = Sortable.create($('#chapters-container')[0], {
    handle: '.sortable-handle', // Specify the handle element for dragging
    animation: 150, // Set the animation speed (in milliseconds)
    onEnd: () => {
      updateOrder(); // Callback function to update the chapter order after reordering
      showSaveModal();
    },
  });

  $('#suggest-chapters').click(async () => {
    const suggestButton = $('#suggest-chapters');
    const suggestButtonLoader = $('#suggest-chapters-loader');

    suggestButton.prop('disabled', true);
    suggestButton.addClass('bg-gray-500 hover:bg-gray-500');
    suggestButtonLoader.removeClass('hidden');

    const systemMessage = 'Answer with only one json array, example: [ "First", "Second", ...], without any comments.';
    const userMessage = `Suggest ${$('#suggested-amount').val()} chapter names, without number, for a book titled "<%= raw @book.title %>"`;
    let suggestions = await getSuggestionsFromGPT(systemMessage, userMessage);

    suggestions.forEach(chapterText => {
      addChapter(null, chapterText);
    });

    suggestButton.prop('disabled', false);
    suggestButton.removeClass('bg-gray-500 hover:bg-gray-500');
    suggestButtonLoader.addClass('hidden');

    showSaveModal();
  });

  updateOrder();

  $('form').on('submit', function(event) {
    const chapterTitles = $('.chapter-title-input');
    const uniqueTitles = new Set(chapterTitles.map((index, input) => input.value.trim()).get());

    if (chapterTitles.length !== uniqueTitles.size) {
      event.preventDefault();
      alert('Chapter titles must be unique.');
      return;
    }
  });
});

function addChapter(chapterId, chapterText = null) {
    const chapterField = $('<div>').addClass('chapter-field');

    const chapterIdInput = $('<input>')
      .attr('type', 'hidden')
      .attr('name', 'chapters[][id]')
      .val(chapterId || '');
    chapterField.append(chapterIdInput);

    const chapterNumber = $('<input>')
      .attr('type', 'number')
      .attr('readonly', true)
      .val(++chapterCount)
      .addClass('sortable-handle w-[60px] detail-number appearance-none bg-transparent text-center');
    chapterField.append(chapterNumber);

    const chapterInput = $('<input>')
      .attr('type', 'text')
      .attr('name', 'chapters[][title]')
      .addClass('chapter-title-input w-[60vw]')
      .val(chapterText)
      .prop('required', true)
      .on('input', showSaveModal);

    const removeButton = $('<button>')
      .attr('type', 'button')
      .addClass('bg-blue-700 hover:bg-blue-500 inline-block transition-all duration-500 text-white font-bold py-2 px-4 ml-2 my-2 rounded remove-section')
      .text('Remove')
      .click(remove);


    chapterField.append(chapterInput);
    chapterField.append(removeButton);
    chaptersContainer.append(chapterField);
  }

function updateOrder() {
  const chapterFields = chaptersContainer.find('.chapter-field');
  chapterFields.each((index, chapterField) => {
    const chapterNumberInput = $(chapterField).find('input[type="number"]');
    chapterNumberInput.val(index + 1);
  });
}

function remove() {
  const field = $(event.target).closest('.chapter-field');
  field.remove();
  chapterCount--;
  updateOrder();
  showSaveModal();
}

function showSaveModal() {
  $('#save-changes-modal').removeClass('hidden');
  setTimeout(function() {
    $('#save-changes-modal').css('bottom', '2.25rem');
  }, 200);
  setTimeout(function() {
    $('#save-changes-modal').css('transition-duration', '2s');
    $('#save-changes-modal').css('bottom', '.50rem');
  }, 700);
}
</script>
